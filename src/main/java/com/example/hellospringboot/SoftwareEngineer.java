package com.example.hellospringboot;

import java.math.BigDecimal;
import java.util.Objects;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;

@Entity
public class SoftwareEngineer {

    /** The unique identifier for the software engineer. */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;

    /** The name of the software engineer. */
    private String name;

    /**  The technology stack that the software engineer specializes in. */
    private String techStack;

    /** The salary that the software engineer earns annually. */
    private BigDecimal salary;

    /** The learning path recommendation generated by the AI service. */
    @Column(columnDefinition = "TEXT")
    private String learningPathRecommendation;

    /**
     * Default constructor for SoftwareEngineer.
     * Initializes a new instance with default values.
     */
    public SoftwareEngineer() {

    }

    /**
     * Parameterized constructor for SoftwareEngineer.
     * 
     * @param id the unique identifier for the software engineer
     * @param name the name of the software engineer
     * @param techStack the technology stack of the software engineer
     * @param salary the annual salary of the software engineer
     * @param learningPathRecommendation the AI-generated learning path recommendation
     */
    public SoftwareEngineer(Integer id, String name, String techStack, BigDecimal salary, String learningPathRecommendation) {
        this.id = id;
        this.name = name;
        this.techStack = techStack;
        this.salary = salary;
        this.learningPathRecommendation = learningPathRecommendation;
    }

    // Getters and Setters
    public Integer getId() {return id;}
    public void setId(Integer id) {this.id = id;}
    public String getName() {return name;}
    public void setName(String name) {this.name = name;}
    public String getTechStack() {return techStack;}
    public void setTechStack(String techStack) {this.techStack = techStack;}
    public String getLearningPathRecommendation() {return learningPathRecommendation;}
    public void setLearningPathRecommendation(String learningPathRecommendation) {this.learningPathRecommendation = learningPathRecommendation;}
    public BigDecimal getSalary() {return salary;}
    public void setSalary(BigDecimal salary) {this.salary = salary;}

    @Override
    /**
     * Compares this SoftwareEngineer object with another object for equality.
     * Two SoftwareEngineer objects are considered equal if they have the same id, name,
     * techStack, salary and learningPathRecommendation.
     * 
     * @param o the object to compare with
     * @return true if the objects are equal, false otherwise
     */
    public boolean equals(Object o) {
        if (o == null || getClass() != o.getClass()) return false;
        SoftwareEngineer that = (SoftwareEngineer) o;
        return Objects.equals(id, that.id) 
            && Objects.equals(name, that.name)
            && Objects.equals(techStack, that.techStack)
            && Objects.equals(salary, that.salary)
            && Objects.equals(learningPathRecommendation, that.learningPathRecommendation);
    }

    @Override
    /**
     * Generates a hash code for this SoftwareEngineer object.
     * The hash code is based on the id, name, techStack, salary and learningPathRecommendation fields.
     * 
     * @return the hash code value
     */
    public int hashCode() {
        return Objects.hash(id, name, techStack, salary, learningPathRecommendation);
    }
}
